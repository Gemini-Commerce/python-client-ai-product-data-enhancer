# coding: utf-8

"""
    aiproductdataenhancer/service.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from aiproductdataenhancer.models.aiproductdataenhancer_language_code import AiproductdataenhancerLanguageCode
from aiproductdataenhancer.models.aiproductdataenhancer_product_information import AiproductdataenhancerProductInformation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AiproductdataenhancerFillProductDataRequest(BaseModel):
    """
    AiproductdataenhancerFillProductDataRequest
    """ # noqa: E501
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    language_code: Optional[AiproductdataenhancerLanguageCode] = Field(default=None, alias="languageCode")
    product_information: Optional[AiproductdataenhancerProductInformation] = Field(default=None, alias="productInformation")
    product_data_to_fill: Optional[List[StrictStr]] = Field(default=None, alias="productDataToFill")
    domains_to_include: Optional[List[StrictStr]] = Field(default=None, alias="domainsToInclude")
    domains_to_exclude: Optional[List[StrictStr]] = Field(default=None, alias="domainsToExclude")
    __properties: ClassVar[List[str]] = ["tenantId", "languageCode", "productInformation", "productDataToFill", "domainsToInclude", "domainsToExclude"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AiproductdataenhancerFillProductDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product_information
        if self.product_information:
            _dict['productInformation'] = self.product_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AiproductdataenhancerFillProductDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "languageCode": obj.get("languageCode"),
            "productInformation": AiproductdataenhancerProductInformation.from_dict(obj.get("productInformation")) if obj.get("productInformation") is not None else None,
            "productDataToFill": obj.get("productDataToFill"),
            "domainsToInclude": obj.get("domainsToInclude"),
            "domainsToExclude": obj.get("domainsToExclude")
        })
        return _obj


